{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","validator","NewMovie","state","values","errors","handleChange","event","persist","target","name","value","test","setState","trim","handleSubmit","preventDefault","props","onAdd","this","onSubmit","classNames","type","placeholder","onChange","Component","App","moviesFromServer","addMovie","newMovie","Math","random","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83621b2b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './NewMovie.scss';\n\n// eslint-disable-next-line max-len\nconst validator = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport class NewMovie extends Component {\n  state = {\n    values: {\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    },\n    errors: {\n      title: false,\n      description: false,\n      imgUrl: false,\n      imdbUrl: false,\n      imdbId: false,\n    },\n  };\n\n  handleChange = (event) => {\n    event.persist();\n    const { name, value } = event.target;\n\n    if (name === 'imgUrl' || name === 'imdbUrl') {\n      if (validator.test(value)) {\n        this.setState(state => ({\n          values: {\n            ...state.values,\n            [name]: value.trim(),\n          },\n          errors: {\n            ...state.errors,\n            [name]: false,\n          },\n        }));\n      }\n\n      if (!validator.test(value)) {\n        this.setState(state => ({\n          values: {\n            ...state.values,\n          },\n          errors: {\n            ...state.errors,\n            [name]: true,\n          },\n        }));\n      }\n    }\n\n    if (name !== 'imgUrl' && name !== 'imdbUrl') {\n      this.setState(state => ({\n        values: {\n          ...state.values,\n          [name]: value.trim(),\n        },\n        errors: {\n          ...state.errors,\n          [name]: false,\n        },\n      }));\n    }\n  }\n\n  handleSubmit = (event) => {\n    const { title, description, imdbId, imdbUrl, imgUrl } = this.state.values;\n\n    event.preventDefault();\n\n    if (!title || !imdbId || !imdbUrl || !imgUrl) {\n      this.setState(state => ({\n        errors: {\n          title: !state.values.title,\n          imgUrl: !state.values.imgUrl,\n          imdbUrl: !state.values.imdbUrl,\n          imdbId: !state.values.imdbId,\n        },\n      }));\n    }\n\n    if (title && imdbId && imdbUrl && imgUrl) {\n      this.props.onAdd(title, imdbId, imdbUrl, imgUrl, description);\n      this.setState({\n        values: {\n          title: '',\n          description: '',\n          imgUrl: '',\n          imdbUrl: '',\n          imdbId: '',\n        },\n      });\n    }\n  }\n\n  render() {\n    const { values, errors } = this.state;\n\n    return (\n      <>\n        <h1>Add new movie form:</h1>\n        <form onSubmit={this.handleSubmit}>\n          {errors.title && <p>Please enter the title!</p>}\n          <input\n            className={classNames('input', { 'is-danger': errors.title })}\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"title\"\n            value={values.title}\n            onChange={this.handleChange}\n          />\n          <br />\n          {errors.imdbId && <p>Please enter the imdbId!</p>}\n          <input\n            className={classNames('input', { 'is-danger': errors.imdbId })}\n            type=\"imdbId\"\n            name=\"imdbId\"\n            placeholder=\"imdbId\"\n            value={values.imdbId}\n            onChange={this.handleChange}\n          />\n          <br />\n          {errors.imdbUrl && <p>Please enter the imdbUrl!</p>}\n          <input\n            className={classNames('input', { 'is-danger': errors.imdbUrl })}\n            type=\"imdbUrl\"\n            name=\"imdbUrl\"\n            placeholder=\"imdbUrl\"\n            value={values.imdbUrl}\n            onChange={this.handleChange}\n          />\n          <br />\n          {errors.imgUrl && <p>Please enter imgUrl!</p>}\n          <input\n            className={classNames('input', { 'is-danger': errors.imgUrl })}\n            type=\"imgUrl\"\n            name=\"imgUrl\"\n            placeholder=\"imgUrl\"\n            value={values.imgUrl}\n            onChange={this.handleChange}\n          />\n          <br />\n          <textarea\n            className=\"textarea\"\n            name=\"description\"\n            placeholder=\"Description\"\n            value={values.description}\n            onChange={this.handleChange}\n          />\n          <br />\n          <button\n            className=\"button is-light\"\n            type=\"submit\"\n          >\n            New movie!\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (title, imdbId, imdbUrl, imgUrl, description) => {\n    const newMovie = {\n      key: Math.random(),\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    this.setState(prevState => ({\n      movies: [\n        ...prevState.movies,\n        newMovie,\n      ],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}